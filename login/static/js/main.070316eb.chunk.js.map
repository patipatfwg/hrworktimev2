{"version":3,"sources":["Loginscreen.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","LoginMain","username_val","$","val","password_val","css","html","url","window","location","assign","handleKeyPress","e","key","onAccept","props","target","value","className","src","alt","method","icon","faUser","type","id","placeholder","onKeyPress","this","faKey","onClick","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVA0FeA,E,4MAhFbC,UAAY,WAEV,IAAIC,EAAeC,IAAE,aAAaC,MAC9BC,EAAeF,IAAE,aAAaC,MAClC,GAAkB,KAAfF,GAAoC,KAAfG,EAEtBF,IAAE,cAAcG,IAAI,QAAQ,WAC5BH,IAAE,cAAcI,KAAK,mCAGvB,CACE,IAAIC,EAAM,wBACQ,kBAAfN,GAAiD,mBAAfG,GAId,kBAAfH,GAAiD,mBAAfG,GAInB,kBAAfH,GAAiD,mBAAfG,EANxCI,OAAOC,SAASC,OAAOH,IAYvBL,IAAE,cAAcG,IAAI,QAAQ,WAC5BH,IAAE,cAAcI,KAAK,sC,EAI3BK,eAAiB,SAACC,GAChB,GAAc,UAAVA,EAAEC,IAAiB,CAAC,IACdC,EAAa,EAAKC,MAAlBD,SACRA,GAAYA,EAASF,EAAEI,OAAOC,OAC9B,EAAKjB,c,uDAIP,OACE,6BAASkB,UAAU,qBACjB,yBAAKA,UAAU,+CACb,yBAAKA,UAAU,+BACb,8BACE,yBAAKC,IAAI,sJAAsJD,UAAU,OAAOE,IAAI,UAEtL,6BACA,0BAAMF,UAAU,mBAAhB,iBAGF,yBAAKA,UAAU,aACb,0BAAMG,OAAO,QACX,yBAAKH,UAAU,0BACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAmB,kBAAC,IAAD,CAAiBI,KAAMC,QAE1D,2BAAOC,KAAK,OAAOC,GAAG,WAAWP,UAAU,eAAeQ,YAAY,WAAWC,WAAYC,KAAKjB,kBAG5F,yBAAKO,UAAU,0BACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAmB,kBAAC,IAAD,CAAiBI,KAAMO,QAE9D,2BAAOL,KAAK,WAAWC,GAAG,WAAWP,UAAU,eAAeQ,YAAY,WAAWC,WAAYC,KAAKjB,kBAG1G,yBAAKO,UAAU,cACX,2BAAOM,KAAK,SAASC,GAAG,WAAWR,MAAM,QAAQC,UAAU,+CAA+CY,QAASF,KAAK5B,eAI1I,yBAAKkB,UAAU,eACb,0BAAMO,GAAG,qB,GAzEGM,IAAMC,WCKfC,G,6KARX,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,W,GAJUc,cCQEE,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.070316eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loginscreen.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery'; \r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { faKey } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { Redirect } from \"react-router-dom\";\r\n\r\nclass LoginForm extends React.Component {\r\n  LoginMain = () =>\r\n  {\r\n    var username_val = $(\"#username\").val();\r\n    var password_val = $(\"#password\").val();\r\n    if(username_val===\"\" || password_val===\"\")\r\n    {\r\n      $(\"#msgResult\").css(\"color\",\"#dc3545\");\r\n      $(\"#msgResult\").html(\"Input Username and Password\");\r\n    }\r\n    else\r\n    {\r\n      var url = '../dashboard/main.php';\r\n      if(username_val===\"hrfreewill001\" && password_val===\"hrfwg@freewill\")\r\n      {\r\n        window.location.assign(url);\r\n      }\r\n      else if(username_val===\"hrfreewill002\" && password_val===\"hrfwg@freewill\")\r\n      {\r\n        window.location.assign(url);\r\n      }\r\n      else if(username_val===\"hrfreewill003\" && password_val===\"hrfwg@freewill\")\r\n      {\r\n        window.location.assign(url);\r\n      }\r\n      else\r\n      {\r\n        $(\"#msgResult\").css(\"color\",\"#dc3545\");\r\n        $(\"#msgResult\").html(\"Username and Password Incorrect\");\r\n      }\r\n    }\r\n  }\r\n  handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const { onAccept } = this.props;\r\n      onAccept && onAccept(e.target.value);\r\n      this.LoginMain()\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"section container\">\r\n        <div className=\"card card-login mx-auto text-center bg-dark\">\r\n          <div className=\"card-header mx-auto bg-dark\">\r\n            <span> \r\n              <img src=\"https://static.wixstatic.com/media/2fe8ff_c0ed6354adac43d09b18816fce9bbd4f~mv2.png/v1/fill/w_413,h_113,al_c,q_85,usm_0.66_1.00_0.01/Logo%20FWS.webp\" className=\"w-75\" alt=\"Logo\"></img> \r\n            </span>\r\n            <br/>\r\n            <span className=\"logo_title mt-5\"> HR WorkTime \r\n            </span>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <form method=\"post\">\r\n              <div className=\"input-group form-group\">\r\n                <div className=\"input-group-prepend\">\r\n                  <span className=\"input-group-text\"><FontAwesomeIcon icon={faUser} /></span>\r\n                </div>\r\n                  <input type=\"text\" id=\"username\" className=\"form-control\" placeholder=\"Username\" onKeyPress={this.handleKeyPress}></input>\r\n              </div>\r\n\r\n                        <div className=\"input-group form-group\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\"><FontAwesomeIcon icon={faKey} /></span>\r\n                            </div>\r\n                            <input type=\"password\" id=\"password\" className=\"form-control\" placeholder=\"Password\" onKeyPress={this.handleKeyPress}></input>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input type=\"button\" id=\"LoginBtn\" value=\"Login\" className=\"btn btn-outline-danger float-right login_btn\" onClick={this.LoginMain} ></input>\r\n                        </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <span id=\"msgResult\"></span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm","import React, { Component } from 'react'\nimport LoginForm from './Loginscreen'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <LoginForm />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}