{"version":3,"sources":["banner_fwg.png","Loginscreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","LoginMain","username_val","base64_encode","$","val","password_val","css","html","DataStatus","FLAG_CHECK_WARNING","response","axios","post","username","password","console","log","FLAG_CHECK_FINISH","url","map","data","code","status","e","text","localStorage","setItem","window","location","assign","handleKeyPress","key","onAccept","props","target","value","className","src","banner_fwg","alt","method","icon","faUser","type","id","placeholder","onKeyPress","this","faKey","onClick","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,6VC2H5BC,E,4MA7GbC,UAAY,WAEV,IAAIC,EAAeC,iBAAeC,IAAE,aAAaC,OAC7CC,EAAeH,iBAAeC,IAAE,aAAaC,OAEjD,GAAkB,KAAfH,GAAoC,KAAfI,EAEtBF,IAAE,cAAcG,IAAI,QAAQ,WAC5BH,IAAE,cAAcI,KAAK,oCAKrB,IACE,IAGIC,EACAC,EAJEC,EAAWC,IAAMC,KAAK,mEAAoE,CAAEC,SAASZ,EAAca,SAAST,IAClIU,QAAQC,IAAI,8BAAqBN,GAIjC,IAAIO,EAAkB,IAClBC,EAAM,wBACVR,EAASS,KAAK,SAACC,GAEX,OAAgB,MAAZA,EAAKC,MAEPZ,EAAqB,IACrBQ,EAAoB,IACbT,EAAaY,EAAKE,QAIlBb,EAAqB,OAIlC,MAAOc,GACPR,QAAQC,IAAR,6CAAwCO,IAIpB,MAArBd,GAAgD,MAApBQ,GAE7Bd,IAAE,cAAcG,IAAI,QAAQ,WAC5BH,IAAE,cAAcI,KAAK,mCACrBJ,IAAE,aAAaqB,KAAK,KAEM,MAApBP,IAENQ,aAAaC,QAAQ,uBAAwBzB,GAC7CwB,aAAaC,QAAQ,qBAAsBlB,GAC3CmB,OAAOC,SAASC,OAAOX,K,EAK3BY,eAAiB,SAACP,GAChB,GAAc,UAAVA,EAAEQ,IAAiB,CAAC,IACdC,EAAa,EAAKC,MAAlBD,SACRA,GAAYA,EAAST,EAAEW,OAAOC,OAC9B,EAAKnC,c,uDAOP,OACE,6BAASoC,UAAU,qBACjB,yBAAKA,UAAU,+CACb,yBAAKA,UAAU,+BACb,8BAEE,yBAAKC,IAAKC,IAAYF,UAAU,OAAOG,IAAI,UAG7C,6BACA,0BAAMH,UAAU,mBAAhB,iBAGF,yBAAKA,UAAU,aACb,0BAAMI,OAAO,QACX,yBAAKJ,UAAU,0BACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAmB,kBAAC,IAAD,CAAiBK,KAAMC,QAE1D,2BAAOC,KAAK,OAAOC,GAAG,WAAWR,UAAU,eAAeS,YAAY,WAAWC,WAAYC,KAAKjB,kBAG5F,yBAAKM,UAAU,0BACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAmB,kBAAC,IAAD,CAAiBK,KAAMO,QAE9D,2BAAOL,KAAK,WAAWC,GAAG,WAAWR,UAAU,eAAeS,YAAY,WAAWC,WAAYC,KAAKjB,kBAG1G,yBAAKM,UAAU,cACX,2BAAOO,KAAK,SAASC,GAAG,WAAWT,MAAM,QAAQC,UAAU,+CAA+Ca,QAASF,KAAK/C,eAI1I,yBAAKoC,UAAU,eACb,0BAAMQ,GAAG,qB,GAtGGM,IAAMC,WCCfC,G,6KARX,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,W,GAJUe,cCQEE,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.39c4215c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner_fwg.dcb3a22a.png\";","import React from 'react';\r\nimport axios from \"axios\";\r\nimport './Loginscreen.css';\r\nimport banner_fwg from \"./banner_fwg.png\";\r\nimport myUsers from './data/getJSON_getUsername.json';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery'; \r\nimport {decode as base64_decode, encode as base64_encode} from 'base-64';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { faKey } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { Redirect } from \"react-router-dom\";\r\n\r\nclass LoginForm extends React.Component {\r\n  LoginMain = () =>\r\n  {\r\n    var username_val = base64_encode( $(\"#username\").val() );\r\n    var password_val = base64_encode( $(\"#password\").val() ); \r\n\r\n    if(username_val===\"\" || password_val===\"\")\r\n    {\r\n      $(\"#msgResult\").css(\"color\",\"#dc3545\");\r\n      $(\"#msgResult\").html(\"Input Username and Password\");\r\n    }\r\n    else\r\n    {\r\n\r\n      try {\r\n        const response = axios.post('http://freewillmdc.loginto.me/hrworktimev2/api/callAPI_login.php', { username:username_val ,password:password_val  });\r\n        console.log('ðŸ‘‰ Returned data:', response);\r\n\r\n        var DataStatus;\r\n        var FLAG_CHECK_WARNING;\r\n        var FLAG_CHECK_FINISH=\"0\";\r\n        var url = '../dashboard/main.php';\r\n        response.map( (data) => {\r\n          // if( username_val===data.username && password_val===base64.decode(data.password) )\r\n            if( data.code===200 )\r\n            {\r\n              FLAG_CHECK_WARNING = \"0\";\r\n              FLAG_CHECK_FINISH = \"1\";\r\n              return DataStatus = data.status;\r\n            }\r\n            else\r\n            {\r\n              return FLAG_CHECK_WARNING = \"1\";\r\n            }\r\n        })\r\n\r\n      } catch (e) {\r\n        console.log(`ðŸ˜± Axios request failed: ${e}`);\r\n      }\r\n    }\r\n    \r\n    if(FLAG_CHECK_WARNING===\"1\" && FLAG_CHECK_FINISH===\"0\")  \r\n    {\r\n      $(\"#msgResult\").css(\"color\",\"#dc3545\");\r\n      $(\"#msgResult\").html(\"Username and Password Incorrect\");\r\n      $(\"#password\").text(\"\");\r\n    }\r\n    else if(FLAG_CHECK_FINISH===\"1\")\r\n    {\r\n      localStorage.setItem('usernameLocalStorage', username_val);\r\n      localStorage.setItem('statusLocalStorage', DataStatus);\r\n      window.location.assign(url);\r\n    }\r\n\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const { onAccept } = this.props;\r\n      onAccept && onAccept(e.target.value);\r\n      this.LoginMain()\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"section container\">\r\n        <div className=\"card card-login mx-auto text-center bg-dark\">\r\n          <div className=\"card-header mx-auto bg-dark\">\r\n            <span> \r\n              {/* <img src=\"https://static.wixstatic.com/media/2fe8ff_c0ed6354adac43d09b18816fce9bbd4f~mv2.png/v1/fill/w_413,h_113,al_c,q_85,usm_0.66_1.00_0.01/Logo%20FWS.webp\" className=\"w-75\" alt=\"Logo\"></img>  */}\r\n              <img src={banner_fwg} className=\"w-75\" alt=\"Logo\"></img>\r\n\r\n            </span>\r\n            <br/>\r\n            <span className=\"logo_title mt-5\"> HR WorkTime \r\n            </span>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <form method=\"post\">\r\n              <div className=\"input-group form-group\">\r\n                <div className=\"input-group-prepend\">\r\n                  <span className=\"input-group-text\"><FontAwesomeIcon icon={faUser} /></span>\r\n                </div>\r\n                  <input type=\"text\" id=\"username\" className=\"form-control\" placeholder=\"Username\" onKeyPress={this.handleKeyPress}></input>\r\n              </div>\r\n\r\n                        <div className=\"input-group form-group\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\"><FontAwesomeIcon icon={faKey} /></span>\r\n                            </div>\r\n                            <input type=\"password\" id=\"password\" className=\"form-control\" placeholder=\"Password\" onKeyPress={this.handleKeyPress}></input>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input type=\"button\" id=\"LoginBtn\" value=\"Login\" className=\"btn btn-outline-danger float-right login_btn\" onClick={this.LoginMain} ></input>\r\n                        </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <span id=\"msgResult\"></span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm","import React, { Component } from 'react'\r\nimport LoginForm from './Loginscreen'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <LoginForm />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can changee\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}